function [solar,solarScenarios] = solarForecast(nativeResolution, horizon_sec, desiredResolution_sec, dayOfYear, dataFilepath)
%SOLAR_FORECAST Generate a set of solar realizations from data
%   Example solar forecast generation from CAMS Radiation Service:
%   Data is manipulated in python with minimal dependencies and output in a
%   .mat file at 1 minute (native) resolution for the current data
%   native_freq: int, Set to 60 for 1 minute data, 1 for 1 second data, etc.
%   T_experiment: int (seconds), the duration of the experiment
%   deltaT_sim: int (seconds), the length of the timestep
%   day_of_year: int, the day of year with January 1st as 1.
%   data_filepath: str, the location of the .mat file to load
solarGHI = load(dataFilepath); % is in minutes (W/m^2)
solarGHI = solarGHI.solar_ghi; % extract the matrix from the struct
startMinute = (dayOfYear-1)*60*24+1; % get the starting time in minutes. Minus 1 is for start of that day
solar = solarGHI(startMinute:startMinute+horizon_sec/nativeResolution-1,:);
% Takes the 1 minute data and transforms it to the simulation frequency
resampleRate = desiredResolution_sec / nativeResolution;

if resampleRate > 1
    if (round(resampleRate) ~= resampleRate)
        error('Solar resampling must be done by integer multiple');
    end
    test = resampleBasic(solar, 60, 3600);
    
    test_interp = resampleBasic(solar, 60, 1);
    % Downsample / average
    solar2 = nan(size(solar)*[1/resampleRate 0;0 1]);
    for i = 1:size(solar2,1)
        solar2(i,:) = mean(solar((i-1)*resampleRate+1:i*resampleRate,:));
    end
    solar = solar2;
elseif resampleRate < 1
    % Upsample / interpolate
    if (round(1/resampleRate) ~= 1/resampleRate)
        error('Solar resampling must be done by integer multiple');
    end
    solar2 = nan(size(solar)*[1/resampleRate 0;0 1]);
    for i = 1:size(solar,1)-1
        solar2((i-1)/resampleRate+1:i/resampleRate,:) = solar(i,:)+(0:resampleRate:(1-resampleRate))'*solar(i+1,:);
    end
    solar = solar2;
end

solar = solar ./ max(solar(:)); % convert the range to be in [0, 1]

% enumerate the possible choices for the solar
solarScenarios = size(solarGHI, 2); % get how many scenarios are available

end

